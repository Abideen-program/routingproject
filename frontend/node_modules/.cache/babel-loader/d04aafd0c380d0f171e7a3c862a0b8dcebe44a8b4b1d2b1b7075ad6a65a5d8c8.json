{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Abideen\\\\Desktop\\\\MY WORK\\\\REACT\\\\routingproject\\\\frontend\\\\src\\\\components\\\\routes\\\\EventPage\\\\EventPage.jsx\",\n  _s = $RefreshSig$();\nimport { json, useLoaderData } from \"react-router-dom\";\nimport EventsList from \"../../EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EventsPage = () => {\n  _s();\n  const data = useLoaderData();\n  const {\n    events\n  } = data;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nexport const loader = async () => {\n  const response = await fetch(\"http://localhost:8080/eventsrefeerere\");\n  if (!response.ok) {\n    // throw new Response(\n    //   JSON.stringify({ message: \"Could not fetch events.\" }, { status: 500 })\n    // );\n    return json({\n      message: \"Could not fetch events.\"\n    }, {\n      status: 2\n    });\n  } else {\n    return response;\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["json","useLoaderData","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","_s","data","events","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","response","fetch","ok","message","status","$RefreshReg$"],"sources":["C:/Users/Abideen/Desktop/MY WORK/REACT/routingproject/frontend/src/components/routes/EventPage/EventPage.jsx"],"sourcesContent":["import { json, useLoaderData } from \"react-router-dom\";\r\nimport EventsList from \"../../EventsList\";\r\n\r\nconst EventsPage = () => {\r\n  const data = useLoaderData();\r\n  const { events } = data;\r\n  return (\r\n    <>\r\n      <EventsList events={events} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EventsPage;\r\n\r\nexport const loader = async () => {\r\n  const response = await fetch(\"http://localhost:8080/eventsrefeerere\");\r\n  if (!response.ok) {\r\n    // throw new Response(\r\n    //   JSON.stringify({ message: \"Could not fetch events.\" }, { status: 500 })\r\n    // );\r\n    return json({ message: \"Could not fetch events.\" }, { status: 2 })\r\n  } else {\r\n    return response;\r\n  }\r\n};\r\n"],"mappings":";;AAAA,SAASA,IAAI,EAAEC,aAAa,QAAQ,kBAAkB;AACtD,OAAOC,UAAU,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1C,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAMC,IAAI,GAAGR,aAAa,EAAE;EAC5B,MAAM;IAAES;EAAO,CAAC,GAAGD,IAAI;EACvB,oBACEL,OAAA,CAAAE,SAAA;IAAAK,QAAA,eACEP,OAAA,CAACF,UAAU;MAACQ,MAAM,EAAEA;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAG,iBAC7B;AAEP,CAAC;AAACP,EAAA,CARID,UAAU;EAAA,QACDN,aAAa;AAAA;AAAAe,EAAA,GADtBT,UAAU;AAUhB,eAAeA,UAAU;AAEzB,OAAO,MAAMU,MAAM,GAAG,MAAAA,CAAA,KAAY;EAChC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,CAAC;EACrE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA,OAAOpB,IAAI,CAAC;MAAEqB,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAE,CAAC,CAAC;EACpE,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF,CAAC;AAAC,IAAAF,EAAA;AAAAO,YAAA,CAAAP,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}